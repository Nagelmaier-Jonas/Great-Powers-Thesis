// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configuration;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(GreatPowersDbContext))]
    [Migration("20221127204853_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Nation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("NAME");

                    b.Property<int>("Treasury")
                        .HasColumnType("int")
                        .HasColumnName("TREASURY");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PLAYER_ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NATIONS");
                });

            modelBuilder.Entity("Model.Entities.Regions.ARegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<sbyte>("HasLandingStrip")
                        .HasColumnType("TINYINT")
                        .HasColumnName("HAS_LANDING_STRIP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("NAME");

                    b.Property<int>("NationId")
                        .HasColumnType("int")
                        .HasColumnName("OWNER_ID");

                    b.HasKey("Id");

                    b.HasIndex("NationId");

                    b.ToTable("REGIONS_BT");
                });

            modelBuilder.Entity("Model.Entities.Regions.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("Damage")
                        .HasColumnType("int")
                        .HasColumnName("DAMAGE");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("REGION_ID");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("FACTORIES");
                });

            modelBuilder.Entity("Model.Entities.Regions.Neighbours", b =>
                {
                    b.Property<int>("NeighbourId")
                        .HasColumnType("int")
                        .HasColumnName("NEIGHBOUR_ID");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("REGION_ID");

                    b.HasKey("NeighbourId", "RegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("REGION_HAS_NEIGHBOURS_JT");
                });

            modelBuilder.Entity("Model.Entities.Settings", b =>
                {
                    b.Property<int>("DiceMode")
                        .HasColumnType("int")
                        .HasColumnName("DICE_MODE");

                    b.Property<int>("StandardVictory")
                        .HasColumnType("int")
                        .HasColumnName("STANDARD_VICTORY");

                    b.Property<int>("TotalVictory")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_VICTORY");

                    b.ToTable("SETTINGS");
                });

            modelBuilder.Entity("Model.Entities.Units.AUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("Movement")
                        .HasColumnType("int")
                        .HasColumnName("MOVEMENT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(45)")
                        .HasColumnName("UNIT_TYPE");

                    b.HasKey("Id");

                    b.ToTable("UNITS_BT");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName", "Email")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Regions.LandRegion", b =>
                {
                    b.HasBaseType("Model.Entities.Regions.ARegion");

                    b.Property<int>("Income")
                        .HasColumnType("int")
                        .HasColumnName("INCOME");

                    b.Property<sbyte>("IsCapital")
                        .HasColumnType("TINYINT")
                        .HasColumnName("IS_CAPITAL");

                    b.ToTable("LAND_REGION");
                });

            modelBuilder.Entity("Model.Entities.Regions.WaterRegion", b =>
                {
                    b.HasBaseType("Model.Entities.Regions.ARegion");

                    b.ToTable("WATER_REGIONS");
                });

            modelBuilder.Entity("Model.Entities.Units.LandUnit", b =>
                {
                    b.HasBaseType("Model.Entities.Units.AUnit");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATION_ID");

                    b.Property<int?>("TransportId")
                        .HasColumnType("int")
                        .HasColumnName("TRANSPORT_ID");

                    b.HasIndex("RegionId");

                    b.HasIndex("TransportId");

                    b.ToTable("LAND_UNITS");
                });

            modelBuilder.Entity("Model.Entities.Units.Plane", b =>
                {
                    b.HasBaseType("Model.Entities.Units.AUnit");

                    b.Property<int?>("AircraftCarrierId")
                        .HasColumnType("int")
                        .HasColumnName("AIRCRAFT_CARRIER_ID");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATION_ID");

                    b.HasIndex("AircraftCarrierId");

                    b.HasIndex("RegionId");

                    b.ToTable("PLANES");
                });

            modelBuilder.Entity("Model.Entities.Units.Ship", b =>
                {
                    b.HasBaseType("Model.Entities.Units.AUnit");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATION_ID");

                    b.HasIndex("RegionId");

                    b.ToTable("SHIPS_BT");
                });

            modelBuilder.Entity("Model.Entities.Units.AircraftCarrier", b =>
                {
                    b.HasBaseType("Model.Entities.Units.Ship");

                    b.ToTable("AIRCRAFT_CARRIER");
                });

            modelBuilder.Entity("Model.Entities.Units.Transport", b =>
                {
                    b.HasBaseType("Model.Entities.Units.Ship");

                    b.ToTable("TRANSPORTER");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Nation", b =>
                {
                    b.HasOne("Model.Entities.User", "User")
                        .WithMany("Nations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.Regions.ARegion", b =>
                {
                    b.HasOne("Model.Entities.Nation", "Nation")
                        .WithMany("Regions")
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nation");
                });

            modelBuilder.Entity("Model.Entities.Regions.Factory", b =>
                {
                    b.HasOne("Model.Entities.Regions.LandRegion", "Region")
                        .WithMany("Factories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Model.Entities.Regions.Neighbours", b =>
                {
                    b.HasOne("Model.Entities.Regions.ARegion", "Neighbour")
                        .WithMany()
                        .HasForeignKey("NeighbourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Regions.ARegion", "Region")
                        .WithMany("Neighbours")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighbour");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Model.Entities.Regions.LandRegion", b =>
                {
                    b.HasOne("Model.Entities.Regions.ARegion", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Regions.LandRegion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Regions.WaterRegion", b =>
                {
                    b.HasOne("Model.Entities.Regions.ARegion", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Regions.WaterRegion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Units.LandUnit", b =>
                {
                    b.HasOne("Model.Entities.Units.AUnit", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Units.LandUnit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Regions.LandRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Units.Transport", "Transport")
                        .WithMany("Units")
                        .HasForeignKey("TransportId");

                    b.Navigation("Region");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Model.Entities.Units.Plane", b =>
                {
                    b.HasOne("Model.Entities.Units.AircraftCarrier", "AircraftCarrier")
                        .WithMany("Planes")
                        .HasForeignKey("AircraftCarrierId");

                    b.HasOne("Model.Entities.Units.AUnit", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Units.Plane", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Regions.ARegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AircraftCarrier");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Model.Entities.Units.Ship", b =>
                {
                    b.HasOne("Model.Entities.Units.AUnit", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Units.Ship", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Regions.WaterRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Model.Entities.Units.AircraftCarrier", b =>
                {
                    b.HasOne("Model.Entities.Units.Ship", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Units.AircraftCarrier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Units.Transport", b =>
                {
                    b.HasOne("Model.Entities.Units.Ship", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Units.Transport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Nation", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Model.Entities.Regions.ARegion", b =>
                {
                    b.Navigation("Neighbours");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Navigation("Nations");
                });

            modelBuilder.Entity("Model.Entities.Regions.LandRegion", b =>
                {
                    b.Navigation("Factories");
                });

            modelBuilder.Entity("Model.Entities.Units.AircraftCarrier", b =>
                {
                    b.Navigation("Planes");
                });

            modelBuilder.Entity("Model.Entities.Units.Transport", b =>
                {
                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
