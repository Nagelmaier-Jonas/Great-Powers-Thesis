@using Model.Entities.Regions
@using Model.Entities
@using Domain.Services
@using View.Services
@using Microsoft.AspNetCore.Components.Web
@using View.Components.Game.Drawer.ConductCombat
@using View.Dialogs
@using System.Text.Json
@using DataTransfer
@using EventBus.Clients
@inject CountryPaths CountryPaths
@inject ActiveRegion ActiveRegion
@inject ViewRefreshService ViewRefreshService
@inject CombatTargets CombatTargets
@inject NonCombatTargets NonCombatTargets
@inject MobilizeUnit MobilizeUnit
@inject GameEngine GameEngine
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IEventPublisher EventPublisher

@if (Region is not null){
    @if (Region.IsLandRegion()){
        @if (Owner.Type == ENation.Neutral){
            <path d="@CountryPaths[Region.Identifier]" class="svg_country @Owner.Name" style="fill: url(#neutral)" stroke="grey" stroke-width="2"/>
        }
        else{
            @if (ActiveRegion.Region?.Id == Region.Id){
                <path d="@CountryPaths[Region.Identifier]" class="active_country svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
            }
            else{
                if ((CombatTargets.Regions is not null && CombatTargets.Regions.Any(r => r.Id == Region.Id)) || (NonCombatTargets.Regions is not null && NonCombatTargets.Regions.Any(r => r.Id == Region.Id) || (MobilizeUnit.Regions is not null && MobilizeUnit.Regions.Any(r => r.Id == Region.Id)))){
                    <path d="@CountryPaths[Region.Identifier]" class="combat_target svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
                }
                else{
                    if (Battlegrounds is not null && Battlegrounds.Any(w => w.Id == Region.Id)){
                        <path d="@CountryPaths[Region.Identifier]" class="battleground svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
                    }
                    else{
                        <path d="@CountryPaths[Region.Identifier]" class="svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
                    }
                }
            }
        }
    }
    else{
        @if (ActiveRegion.Region?.Id == Region.Id){
            <path d="@CountryPaths[Region.Identifier]" class="active_country svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
        }
        else{
            if ((CombatTargets.Regions is not null && CombatTargets.Regions.Any(r => r.Id == Region.Id)) || (NonCombatTargets.Regions is not null && NonCombatTargets.Regions.Any(r => r.Id == Region.Id) || (MobilizeUnit.Regions is not null && MobilizeUnit.Regions.Any(r => r.Id == Region.Id)))){
                <path d="@CountryPaths[Region.Identifier]" class="combat_target svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
            }
            else{
                if (Battlegrounds is not null && Battlegrounds.Any(w => w.Id == Region.Id)){
                    <path d="@CountryPaths[Region.Identifier]" class="battleground svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
                }
                else{
                    <path d="@CountryPaths[Region.Identifier]" class="svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
                }
            }
        }
    }
}

@code {

    [Parameter]
    public ARegion? Region { get; set; }

    [Parameter]
    public Nation Owner { get; set; } = new();

    [Parameter]
    public SessionInfo? SessionInfo { get; set; }

    [Parameter]
    public List<ARegion>? Battlegrounds { get; set; }
    
    [Parameter]
    public User? CurrentUser { get; set; }

    private async Task UpdateRegion(MouseEventArgs args){
        if (args.ShiftKey){
            return;
        }
        if (Region is null) return;
        if(await PlanCombatMovements()) return;
        if (await StartBattle(Region)){
            EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));  
            return;
        }
        if(await PlanNonCombatMovements()) return;
        if (await MobilizeNewUnits()){
            EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));  
            return;
        }
        if (ActiveRegion.Region?.Id == Region.Id){
            ActiveRegion.ClearRegion();
        }
        else{
            ActiveRegion.RefreshRegion(Region);
        }
        EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));  
    }

    private async Task<bool> PlanCombatMovements(){
        if (SessionInfo?.Phase != EPhase.CombatMove) return false;
        if (CombatTargets.Regions is null) return false;
        if (CombatTargets.Units is null) return false;
        if (Region is null) return false;
        if (CombatTargets.Regions.All(r => r.Id != Region.Id)) return false;
        foreach (var u in CombatTargets.Units){
            await GameEngine.PlanMovement(u, Region);
        }
        CombatTargets.ClearRegions();
        CombatTargets.ClearUnits();
        EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));
        return true;
    }

    private async Task<bool> PlanNonCombatMovements(){
        if (SessionInfo?.Phase != EPhase.NonCombatMove) return false;
        if (NonCombatTargets.Regions is null) return false;
        if (NonCombatTargets.Units is null) return false;
        if (Region is null) return false;
        if (NonCombatTargets.Regions.All(r => r.Id == Region.Id)) return false;
        foreach (var u in NonCombatTargets.Units){
            await GameEngine.PlanMovement(u, Region);
        }
        NonCombatTargets.ClearRegions();
        NonCombatTargets.ClearUnits();
        EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));
        return true;
    }

    private async Task<bool> MobilizeNewUnits(){
        if (SessionInfo?.Phase != EPhase.MobilizeNewUnits) return false;
        if (Region is null || MobilizeUnit.Regions is null || MobilizeUnit.Unit is null) return false;
        if (MobilizeUnit.Unit.IsLandUnit() || MobilizeUnit.Unit.IsPlane()){
            await MobilizeLandUnit();
        }
        if (MobilizeUnit.Unit.IsShip()){
            await MobilizeShip();
        }
        if (MobilizeUnit.Unit.IsFactory()){
            await MobilizeFactory();
        }
        MobilizeUnit.ClearRegions();
        MobilizeUnit.ClearUnit();
        EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));  
        return true;
    }

    private async Task<bool> MobilizeLandUnit(){
        if (MobilizeUnit.Regions.All(r => r.Id != Region.Id)) return false;
        if (!Region.IsLandRegion()) return false;
        if (Region.IsLandRegion()){
            var r = Region as LandRegion;
            if (r.Income <= r.TroopsMobilized){
                Snackbar.Add("Maximale Anzahl an Einheiten in dieser Region mobilisiert", Severity.Warning);
                return false;
            }
        }
        await GameEngine.PlaceUnit(MobilizeUnit.Unit, (Region as LandRegion)!);
        return true;
    }

    private async Task<bool> MobilizeFactory(){
        if (MobilizeUnit.Regions.All(r => r.Id != Region.Id)) return false;
        if (!Region.IsLandRegion()) return false;
        if (Region.GetFactory() is not null){
            Snackbar.Add("In dieser Region ist bereits eine Fabrik", Severity.Warning);
            return false;
        }
        await GameEngine.PlaceUnit(MobilizeUnit.Unit, (Region as LandRegion)!);
        return true;
    }

    private async Task<bool> MobilizeShip(){
        var canPlace = await GameEngine.CanPlaceShip(Region);
        if (!canPlace) return false;
        if (MobilizeUnit.Regions.All(r => r.Id != Region.Id)) return false;
        if (!Region.IsWaterRegion()) return false;
        await GameEngine.PlaceUnit(MobilizeUnit.Unit, (Region as WaterRegion)!);
        return true;
    }

    private async Task<bool> StartBattle(ARegion region){
        if (SessionInfo?.Phase != EPhase.ConductCombat) return false;
        var battle = await GameEngine.GetBattle(region);
        if (battle is null) return false;
        ActiveRegion.ClearRegion();
        var parameters = new DialogParameters{
            { "Battle", battle },
            { "CurrentUser", CurrentUser}
        };
        var options = new DialogOptions{ FullScreen = true, CloseButton = true };
        DialogService.Show<ConductCombatDialog>("", parameters, options);
        return true;
    }

}