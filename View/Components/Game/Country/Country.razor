@using Model.Entities.Regions
@using Model.Entities
@using Domain.Services
@using View.Services
@using Microsoft.AspNetCore.Components.Web
@using View.Components.Game.Drawer.ConductCombat
@using View.Dialogs
@inject CountryPaths CountryPaths
@inject ActiveRegion ActiveRegion
@inject ViewRefreshService ViewRefreshService
@inject CombatTargets CombatTargets
@inject GameEngine GameEngine
@inject Battlegrounds Battlegrounds
@inject IDialogService DialogService

@if (Region is not null){
    @if (Region.IsLandRegion()){
        @if (Owner.Type == ENation.Neutral){
            <path d="@CountryPaths[Region.Identifier]" class="svg_country @Owner.Name" style="fill: url(#neutral)" stroke="grey" stroke-width="2"/>
        }
        else{
            @if (ActiveRegion.Region == Region){
                <path d="@CountryPaths[Region.Identifier]" class="active_country svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
            }
            else{
                if (CombatTargets.Regions is not null && CombatTargets.Regions.Contains(Region)){
                    <path d="@CountryPaths[Region.Identifier]" class="combat_target svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
                }
                else{
                    <path d="@CountryPaths[Region.Identifier]" class="svg_country @Owner.Name" fill="@Owner.Color" stroke="grey" stroke-width="2" @onclick="UpdateRegion"/>
                }
            }
        }
    }
    else{
        @if (ActiveRegion.Region == Region){
            <path d="@CountryPaths[Region.Identifier]" class="active_country svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
        }
        else{
            if (CombatTargets.Regions is not null && CombatTargets.Regions.Contains(Region)){
                <path d="@CountryPaths[Region.Identifier]" class="combat_target svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
            }
            else{
                <path d="@CountryPaths[Region.Identifier]" class="svg_country seezone" style="fill: url(#water)" stroke="grey" stroke-width="1" @onclick="UpdateRegion"/>
            }
        }
    }
}

@code {

    [Parameter]
    public ARegion? Region { get; set; }

    [Parameter]
    public Nation Owner { get; set; } = new();

    private void UpdateRegion(MouseEventArgs args){
        if (args.ShiftKey){
            return;
        }
        if (Region is null) return;
        PlanMovements();
        StartBattle(Region);
        if (ActiveRegion.Region == Region){
            ActiveRegion.ClearRegion();
        }
        else{
            ActiveRegion.RefreshRegion(Region);
        }
        ViewRefreshService.Refresh();
    }

    private async void PlanMovements(){
        if (CombatTargets.Regions is null) return;
        if (CombatTargets.Units is null) return;
        if (Region is null) return;
        if (!CombatTargets.Regions.Contains(Region)) return;
        foreach (var u in CombatTargets.Units){
            await GameEngine.PlanMovement(u, Region);
        }
        ViewRefreshService.Refresh();
    }

    private async void StartBattle(ARegion region){
        var battle = await GameEngine.GetBattle(region);
        if (battle is null) return;
        
        var parameters = new DialogParameters{
            {"Battle", battle}
        };
        var options = new DialogOptions{ CloseOnEscapeKey = true , NoHeader = true, DisableBackdropClick = true, FullScreen = true};
        var dialog = await DialogService.ShowAsync<BattleDialog>("Kampf", parameters, options);
        var result = await dialog.Result;
        if (result.Cancelled) return;
    }

}