@using Model.Entities.Units.Abstract
@using Model.Entities
@using Domain.Repositories.Implementations
@inject BattleRepository BattleRepository

<MudContainer Style="@(Attacker ? "border-radius: 0 10px 10px 0;" : "border-radius: 10px 0 0 10px;")" Class="bg-opacity-25 combat-card-container">
    <MudText Style="@(Attacker ? "text-align: start;" : "text-align: end;")" Color="Color.Info">@Label</MudText>
    @if (Units is null){
        return;
    }
    <MudContainer Class="p-0 d-flex vh-13" Style="@(Attacker ? "flex-direction: row" : "flex-direction: row-reverse;")">
        <MudContainer Class="p-0">
            @foreach (var unit in Units){
                @if (unit.Nation != Battle.GetAttacker()){
                    <MudBadge Class="noselect" Content="@("Hit")" OnClick="@(() => PlaceHit(unit))" Overlap="true" Origin="Origin.BottomCenter" Bordered="true">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 95 95" class="@unit.Nation.Name ml-2 mr-2" width="50" height="50">
                            <g>
                                <circle class="troopbadge-medal" cx="47.5" cy="47.5" r="47.25"/>
                                <path class="troopbadge-medal"
                                      d="M47.5,.5c25.92,0,47,21.08,47,47s-21.08,47-47,47S.5,73.42,.5,47.5,21.58,.5,47.5,.5m0-.5C21.27,0,0,21.27,0,47.5s21.27,47.5,47.5,47.5,47.5-21.27,47.5-47.5S73.73,0,47.5,0h0Z"/>
                            </g>
                            <path class="troopbadge-symbol"
                                  d="@unit.GetStringFromDictionary(UnitPaths.Paths)"/>
                        </svg>
                    </MudBadge>
                }
                else{
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 95 95" class="@unit.Nation.Name ml-2 mr-2" width="50" height="50">
                        <g>
                            <circle class="troopbadge-medal" cx="47.5" cy="47.5" r="47.25"/>
                            <path class="troopbadge-medal"
                                  d="M47.5,.5c25.92,0,47,21.08,47,47s-21.08,47-47,47S.5,73.42,.5,47.5,21.58,.5,47.5,.5m0-.5C21.27,0,0,21.27,0,47.5s21.27,47.5,47.5,47.5,47.5-21.27,47.5-47.5S73.73,0,47.5,0h0Z"/>
                        </g>
                        <path class="troopbadge-symbol"
                              d="@unit.GetStringFromDictionary(UnitPaths.Paths)"/>
                    </svg>
                }
            }
        </MudContainer>
        <MudContainer Class="p-0 text-center" Style="@(Attacker ? "border-left: 1px solid grey; width:5vw; padding-left: 10px !important;" : "border-right: 1px solid grey; width:5vw; padding-right: 10px !important;")">
            @if (Units.Count > 0){
                <MudText Color="Color.Info">Wirf</MudText>
                <MudImage Src="img/dices/dice_one.svg"></MudImage>
                <MudText Color="Color.Info">oder weniger</MudText>
            }
            else{
                <MudText Color="Color.Info" Class="text-center">Keine Einheiten</MudText>
            }
        </MudContainer>
    </MudContainer>
</MudContainer>


@code {

    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public List<AUnit>? Units { get; set; }

    [Parameter]
    public bool Attacker { get; set; }

    [Parameter]
    public Battle? Battle { get; set; }

    private async Task PlaceHit(AUnit unit){
        if (Battle is null) return;
        Battle.PlaceHit(unit);
        await BattleRepository.UpdateAsync(Battle);
        StateHasChanged();
    }

}