@using System.Globalization
@using Domain.Repositories
@using Domain.Services
@using Model.Entities
@using Model.Entities.Regions
@using Model.Entities.Units
@using System.Drawing
@using BlazorPanzoom
@using Domain.Repositories.Implementations
@using View.Services
@inject ActiveRegion ActiveRegion
@inject NationRepository NationRepository
@inject WaterRegionRepository WaterRegionRepository

<div class="panzoom-parent" style="height: 1080px">
    <Panzoom @ref="_panzoom" PanzoomOptions="@(new PanzoomOptions(){ Contain = Contain.Outside, Cursor = Cursor.Auto })" WheelMode="WheelMode.Custom" OnWheel="OnWheel">
        <svg viewBox="0 0 1920 1080" @ref="context.ElementReference" class="panzoom">
            @foreach (var nation in Nations){
                foreach (var land in nation.Regions){
                    <Country Region="@land" Owner="@nation"/>
                    foreach (var unit in land.GetOneStationedUnitPerType()){
                        <Unit Troop="@unit" Amount="@land.GetStationedUnitCounts()[unit.Type]" Region="@land"/>
                    }
                }
            }
            @foreach (var sea in SeeZones){
                <Country Region="@sea"/>
                foreach (var unit in sea.GetOneStationedUnitPerType()){
                    <Unit Troop="@unit" Amount="@sea.GetStationedUnitCounts()[unit.Type]" Region="@sea"/>
                }
            }
            <Channel/>
        </svg>
    </Panzoom>
</div>
@if (ActiveRegion.Region is not null){
    <TroopBar Region="ActiveRegion.Region"/>
}


@code{

    private List<Nation> Nations { get; set; } = new();
    private List<WaterRegion> SeeZones { get; set; } = new();
    private Panzoom _panzoom = new();

    private async Task OnWheel(CustomWheelEventArgs args){
        if (!args.ShiftKey){
            return;
        }
        await _panzoom.ZoomWithWheelAsync(args);
    }

    private async void HandleRegionChange(){
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync(){
        ActiveRegion.HandleRegionChange += HandleRegionChange;
        Nations = await NationRepository.ReadAllGraphAsync();
        SeeZones = await WaterRegionRepository.ReadAllGraphAsync();
    }

}