@using System.Globalization
@using Domain.Factories
@using Domain.Repositories
@using Domain.Services
@using Model.Entities
@using Model.Entities.Regions
@using Model.Entities.Units
@using System.Drawing
@using BlazorPanzoom
@using View.Services
@inject ActiveRegion ActiveRegion

<div class="panzoom-parent" style="height: 1080px">
    <Panzoom @ref="_panzoom" PanzoomOptions="@(new PanzoomOptions(){ Contain = Contain.Outside, Cursor = Cursor.Auto })" WheelMode="WheelMode.Custom" OnWheel="OnWheel">
        <svg viewBox="0 0 1920 1080" @ref="context.ElementReference" class="panzoom">
            @foreach (var nation in Nations){
                @if (nation.Regions is null){
                    continue;
                }
                foreach (var region in nation.Regions){
                    <Country Region="@region" Owner="@nation"/>
                    foreach (var unit in region.GetOneStationedUnitPerType()){
                        <Unit Troop="@unit" Amount="@region.GetStationedUnitCounts()[unit.Type]"/>
                    }
                }
            }
        </svg>
    </Panzoom>
</div>
@if (ActiveRegion.Region is not null){
    <TroopBar Region="ActiveRegion.Region"/>
}


@code{

    private List<Nation> Nations { get; set; } = new();
    private Panzoom _panzoom = new();

    private async Task OnWheel(CustomWheelEventArgs args){
        if (!args.ShiftKey){
            return;
        }
        await _panzoom.ZoomWithWheelAsync(args);
    }

    private async void HandleRegionChange(){
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync(){
        ActiveRegion.HandleRegionChange += HandleRegionChange;
        Nations.Add(new Nation(){
            Name = "Germany",
            Regions = new List<LandRegion>(){
                new LandRegion(){
                    Identifier = ERegion.CentralAmerica,
                    Name = "Central America",
                    Income = 2,
                    Position = new Point(){ X = 30, Y = 350 }
                }
            },
            Treasury = 1,
            Color = "#8ea39e",
        });
        Nations.Add(new Nation(){
            Name = "Soviet_Union",
            Regions = new List<LandRegion>(){
                new LandRegion(){
                    Identifier = ERegion.WestAmerica,
                    Name = "West America",
                    Income = 2,
                    Position = new Point(){ X = 120, Y = 350 },
                }
            },
            Treasury = 1,
            Color = "#ba8772",
        });

        var u1 = LandUnitFactory.Create(EUnitType.TANK, Nations[0].Regions[0], Nations[0]);
        var u5 = LandUnitFactory.Create(EUnitType.ANTI_AIR, Nations[0].Regions[0], Nations[0]);
        var u2 = LandUnitFactory.Create(EUnitType.INFANTRY, Nations[1].Regions[0], Nations[1]);
        var u3 = LandUnitFactory.Create(EUnitType.INFANTRY, Nations[1].Regions[0], Nations[1]);
        var u4 = LandUnitFactory.Create(EUnitType.INFANTRY, Nations[1].Regions[0], Nations[1]);

        Nations[0].Regions[0].Nation = Nations[0];
        Nations[1].Regions[0].Nation = Nations[1];

        Nations[0].Regions[0].StationedUnits.Add(u1);
        Nations[0].Regions[0].StationedUnits.Add(u5);
        Nations[1].Regions[0].StationedUnits.Add(u2);
        Nations[1].Regions[0].StationedUnits.Add(u3);
        Nations[1].Regions[0].StationedUnits.Add(u4);
    }

}