@using Model.Entities.Units
@using Model.Entities
@using System.Drawing
@using Domain.Repositories.Implementations
@using Model.Entities.Regions
@using View.Services
@inject AircraftCarrierRepository AircraftCarrierRepository
@inject TransportRepository TransportRepository
@inject ActiveRegion ActiveRegion

@if (Troop is not null && Region is not null){
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 95 95" class="@Troop.Nation.Name @Class" width="20" height="20" x="@(Region.PositionX + Troop.GetPointFromDictionary(TroopPositioning).Value.X)" y="@(Region.PositionY + Troop.GetPointFromDictionary(TroopPositioning).Value.Y))" @onclick="args => UpdateRegion(args)">
        <g>
            <circle class="troopbadge-medal" cx="47.5" cy="47.5" r="47.25"/>
            <path class="troopbadge-medal"
                  d="M47.5,.5c25.92,0,47,21.08,47,47s-21.08,47-47,47S.5,73.42,.5,47.5,21.58,.5,47.5,.5m0-.5C21.27,0,0,21.27,0,47.5s21.27,47.5,47.5,47.5,47.5-21.27,47.5-47.5S73.73,0,47.5,0h0Z"/>
        </g>
        <path class="troopbadge-symbol"
              d="@Troop.GetStringFromDictionary(UnitPaths.Paths)"/>
        @if (Troop.GetType() == typeof(AShip) || Troop.GetType() == typeof(Transport) || Troop.GetType() == typeof(AircraftCarrier)){
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: white;" transform="translate(39.87 31.56)">
                    <tspan x="0" y="0">@Troop.ToString()[0]</tspan>
                </text></text>
            @if (RenderSubTroops){
                <SubUnit Troops="@Troop.GetSubUnits()"/>
            }
        }
        <circle fill="#ffc107" cx="78.26" cy="78.01" r="16.74"/>
        @if (Amount > 9){
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: black;" transform="translate(67.49 83.91)">
                    <tspan x="0" y="0">@Amount</tspan>
                </text></text>
        }
        else{
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: black;" transform="translate(71.49 83.91)">
                    <tspan x="0" y="0">@Amount</tspan>
                </text></text>
        }
    </svg>
}

@code {

    [Parameter]
    public AUnit? Troop { get; set; }

    [Parameter]
    public int? Amount { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool RenderSubTroops { get; set; }

    private ARegion? Region { get; set; }

    private Dictionary<AUnit, Point> TroopPositioning { get; set; } = new(){
        { UnitPaths.Units[0], new Point(-10, -30) },
        { UnitPaths.Units[1], new Point(-10, 10) },
        { UnitPaths.Units[2], new Point(-30, -20) },
        { UnitPaths.Units[3], new Point(-30, 0) },
        { UnitPaths.Units[4], new Point(10, -20) },
        { UnitPaths.Units[5], new Point(10, 0) },
        { UnitPaths.Units[6], new Point(-10, -30) },
        { UnitPaths.Units[7], new Point(-10, 10) },
        { UnitPaths.Units[8], new Point(-30, -20) },
        { UnitPaths.Units[9], new Point(-30, 20) },
        { UnitPaths.Units[10], new Point(30, -20) },
        { UnitPaths.Units[11], new Point(30, 20) },
    };

    protected override void OnInitialized(){
        if (Troop is null) return;
        Region = Troop.GetLocation();
    }

    private void UpdateRegion(MouseEventArgs args){
        if (args.ShiftKey){
            return;
        }
        if (Region is null) return;
        if (ActiveRegion.Region == Region){
            ActiveRegion.ClearRegion();
        }
        else{
            ActiveRegion.RefreshRegion(Region);
        }
    }

}