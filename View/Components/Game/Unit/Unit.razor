@using Model.Entities.Units
@using Model.Entities
@using System.Drawing
@using Domain.Repositories.Implementations
@using Domain.Services
@using Model.Entities.Regions
@using Model.Entities.Units.Abstract
@using View.Services
@inject AircraftCarrierRepository AircraftCarrierRepository
@inject TransportRepository TransportRepository
@inject ActiveRegion ActiveRegion
@inject ViewRefreshService ViewRefreshService

@if (Troop is not null && Region is not null){
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 95 95" class="@Troop.Nation.Name @Class" width="20" height="20" x="@(Region.PositionX + GetPosition(Troop).X)" y="@(Region.PositionY + GetPosition(Troop).Y)" @onclick="args => UpdateRegion(args)">
        <g>
            <circle class="troopbadge-medal" cx="47.5" cy="47.5" r="47.25"/>
            <path class="troopbadge-medal"
                  d="M47.5,.5c25.92,0,47,21.08,47,47s-21.08,47-47,47S.5,73.42,.5,47.5,21.58,.5,47.5,.5m0-.5C21.27,0,0,21.27,0,47.5s21.27,47.5,47.5,47.5,47.5-21.27,47.5-47.5S73.73,0,47.5,0h0Z"/>
        </g>
        <path class="troopbadge-symbol"
              d="@Troop.GetStringFromDictionary(UnitPaths.Paths)"/>
        @if (Troop.IsBattleship() || Troop.IsCruiser() || Troop.IsDestroyer() || Troop.IsSubmarine() || Troop.IsAircraftCarrier() || Troop.IsTransport()){
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: white;" transform="translate(39.87 31.56)">
                    <tspan x="0" y="0">@Troop.ToString()[0]</tspan>
                </text></text>
            @if (RenderSubTroops){
                <SubUnit Troops="@Troop.GetSubUnits()"/>
            }
        }
        @if (Amount is not 0){
            <circle fill="#ffc107" cx="78.26" cy="78.01" r="16.74"/>
            @if (Amount > 9){
                <text>
                    <text style="font-size: 19px; font-weight: bold; fill: black;" transform="translate(67.49 83.91)">
                        <tspan x="0" y="0">@Amount</tspan>
                    </text></text>
            }
            else{
                <text>
                    <text style="font-size: 19px; font-weight: bold; fill: black;" transform="translate(71.49 83.91)">
                        <tspan x="0" y="0">@Amount</tspan>
                    </text></text>
            }
        }
    </svg>
}

@code {

    [Parameter]
    public AUnit? Troop { get; set; }

    [Parameter]
    public int? Amount { get; set; } = 0;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool RenderSubTroops { get; set; }

    private ARegion? Region { get; set; }

    private Dictionary<AUnit, Point> TroopPositioning { get; set; } = new(){
        { UnitPaths.Units[0], new Point(-10, -30) },
        { UnitPaths.Units[1], new Point(-10, 10) },
        { UnitPaths.Units[2], new Point(-30, -20) },
        { UnitPaths.Units[3], new Point(-30, 0) },
        { UnitPaths.Units[4], new Point(10, -20) },
        { UnitPaths.Units[5], new Point(10, 0) },
        { UnitPaths.Units[6], new Point(-10, -30) },
        { UnitPaths.Units[7], new Point(-10, 10) },
        { UnitPaths.Units[8], new Point(-30, -20) },
        { UnitPaths.Units[9], new Point(-30, 0) },
        { UnitPaths.Units[10], new Point(10, -20) },
        { UnitPaths.Units[11], new Point(10, 0) },
        { UnitPaths.Units[12], new Point(-10, -55) },
    };

    private Point GetPosition(AUnit troop){
        if (Region is null || Troop is null) return new Point();
        if (Region.IsLandRegion()) return troop.GetPointFromDictionary(TroopPositioning).Value;
        if (Region.IsWaterRegion() && Troop.IsFighter() is false && Troop.IsBomber() is false) return troop.GetPointFromDictionary(TroopPositioning).Value;
        return new Point(){
            X = troop.GetPointFromDictionary(TroopPositioning).Value.X + 22,
            Y = troop.GetPointFromDictionary(TroopPositioning).Value.Y
        };
    }

    protected override void OnInitialized(){
        ViewRefreshService.HandleViewRefreshChange += Load;
        Load();
    }

    private void Load(){
        if (Troop is null) return;
        Region = Troop.GetLocation();
        StateHasChanged();
    }

    private void UpdateRegion(MouseEventArgs args){
        if (args.ShiftKey){
            return;
        }
        if (Region is null) return;
        if (ActiveRegion.Region == Region){
            ActiveRegion.ClearRegion();
        }
        else{
            ActiveRegion.RefreshRegion(Region);
        }
    }

}