@using Model.Entities.Units
@using Model.Entities
@using System.Drawing
@inject UnitPaths UnitPaths

@if (Troop?.GetLocation().PositionX != null && Troop.GetLocation().PositionY is not null){
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 95 95" class="@Troop.Nation.Name @Class" width="20" height="20" x="@(Troop.GetLocation().PositionX + TroopPositioning[Troop.Type].X)" y="@(Troop.GetLocation().PositionY + TroopPositioning[Troop.Type].Y)">
        <g>
            <circle class="troopbadge-medal" cx="47.5" cy="47.5" r="47.25"/>
            <path class="troopbadge-medal"
                  d="M47.5,.5c25.92,0,47,21.08,47,47s-21.08,47-47,47S.5,73.42,.5,47.5,21.58,.5,47.5,.5m0-.5C21.27,0,0,21.27,0,47.5s21.27,47.5,47.5,47.5,47.5-21.27,47.5-47.5S73.73,0,47.5,0h0Z"/>
        </g>
        <path class="troopbadge-symbol"
              d="@UnitPaths[Troop.Type]"/>
        @if (Troop.GetType() == typeof(Ship)){
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: grey;" transform="translate(39.87 31.56)">
                    <tspan x="0" y="0">@Troop.Type.ToString()[0]</tspan>
                </text></text>
        }
        <circle fill="#ffc107" cx="78.26" cy="78.01" r="16.74"/>
        @if (Amount > 9){
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: black;" transform="translate(67.49 83.91)">
                    <tspan x="0" y="0">@Amount</tspan>
                </text></text>
        }
        else{
            <text>
                <text style="font-size: 19px; font-weight: bold; fill: black;" transform="translate(71.49 83.91)">
                    <tspan x="0" y="0">@Amount</tspan>
                </text></text>
        }
    </svg>
}

@code {

    [Parameter]
    public AUnit? Troop { get; set; }

    [Parameter]
    public int? Amount { get; set; }
    
    [Parameter]
    public string? Class { get; set; }

    private Dictionary<EUnitType, Point> TroopPositioning { get; set; } = new (){
        {EUnitType.INFANTRY, new Point(0, -25)},
        {EUnitType.TANK, new Point(0, 25)},
        {EUnitType.ANTI_AIR, new Point(-25, -25)},
        {EUnitType.ARTILLERY, new Point(-25, 25)},
        {EUnitType.BOMBER, new Point(25, -25)},
        {EUnitType.FIGHTER, new Point(25, 25)},
        {EUnitType.CRUISER, new Point(0, -25)},
        {EUnitType.DESTROYER, new Point(0, 25)},
        {EUnitType.SUBMARINE, new Point(-25, -25)},
        {EUnitType.TRANSPORT, new Point(-25, 25)},
        {EUnitType.BATTLESHIP, new Point(25, -25)},
        {EUnitType.AIRCRAFT_CARRIER, new Point(25, 25)},
    };

}