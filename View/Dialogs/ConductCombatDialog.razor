@using Model.Entities
@using Model.Entities.Units.Abstract
@using Domain.Repositories.Implementations
@using Domain.Services
@using Vanara.Extensions
@inject IJSRuntime JSRuntime
@inject BattleRepository BattleRepository
@inject NationRepository NationRepository
@inject UnitRepository UnitRepository
@inject GameEngine GameEngine
@inject ViewRefreshService ViewRefreshService
@implements IDisposable

@if (Battle is not null){
    <MudDialog Class="@RegionType">
        <DialogContent>
            <MudPaper Height="10vh" Width="100vw" Class="d-flex bg-transparent shadow-none justify-content-around text-center">
                <MudText Typo="Typo.h3" Color="@Color.Secondary">Angreifer</MudText>
                <MudText Typo="Typo.h5" Color="@Color.Info">Schlachtfeld<br/><MudText Typo="Typo.h3" Color="@Color.Secondary" Class="text-center">@Battle.Location.Name</MudText></MudText>
                <MudText Typo="Typo.h3" Color="@Color.Secondary">Verteidiger</MudText>
            </MudPaper>
            @if (Battle.Location.IsLandRegion()){
                <div id="particles-js"></div>
                <MudPaper Height="85vh" Width="100vw" Class="d-flex bg-transparent shadow-none position-fixed bottom-0 p-0">
                    <MudContainer Class="d-flex flex-column p-0">
                        <CombatCard CurrentUser="CurrentUser" Label="Infantrie" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsInfantry()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Artillerie" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsArtillery()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Panzer" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsTank()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Jäger" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsFighter()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Bomber" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsBomber()).ToList()" Battle="@Battle"/>
                    </MudContainer>
                    <MudContainer Class="d-flex flex-column p-0 text-center">
                        <MudText Color="Color.Secondary">@Battle.CurrentNation.Name</MudText>
                        <MudText Color="Color.Info">@Battle.Phase.GetDescription()</MudText>
                        @if (Battle.DiceRolls is not null){
                            <Dices Rolls="@Battle.DiceRolls"/>
                        }
                        <MudContainer Class="d-flex mt-10 text-center justify-content-center">
                            <MudText Typo="Typo.h5" Color="@Color.Info">Treffer ausstehend: <br/><MudText Typo="Typo.h3" Color="@Color.Secondary" Class="text-center">@(Battle.NormalHits + Battle.NonAirHits + Battle.NonSubmarineHits)</MudText></MudText>
                        </MudContainer>
                        @if (CurrentUser.Nations.Any(i => i.Id == Battle.CurrentNation.Id)){
                            @if (!Battle.IsDecided){
                                <MudFab StartIcon="@Icons.Material.Filled.NextPlan" Color="Color.Error" Label="Fortsetzen" Class="align-self-center mb-3 mt-3 position-absolute bottom-0" OnClick="StartBattle"/>
                                @if (Battle.Phase == EBattlePhase.RESOLUTION && Battle.AttackerDecided == false){
                                    <MudFab StartIcon="@Icons.Material.Filled.Autorenew" Color="Color.Info" Label="Weitermachen" Class="align-self-center mb-3 mt-3 position-absolute bottom-17" OnClick="Continue"/>
                                    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Info" Label="Zurückziehen" Class="align-self-center mb-3 mt-3 position-absolute bottom-10" OnClick="Retreat"/>
                                }
                            }
                            else{
                                <MudFab StartIcon="@Icons.Material.Filled.NextPlan" Color="Color.Error" Label="Beenden" Class="align-self-center mb-3 mt-3 position-absolute bottom-0" OnClick="StartBattle"/>
                            }
                        }
                    </MudContainer>
                    <MudContainer Class="d-flex flex-column p-0">
                        <CombatCard CurrentUser="CurrentUser" Label="Infantrie " Attacker="false" Units="@Battle.Defenders.Where(t => t.IsInfantry()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Artillerie" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsArtillery()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Panzer" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsTank()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Jäger" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsFighter()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Bomber" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsBomber()).ToList()" Battle="@Battle"/>
                    </MudContainer>
                </MudPaper>
            }
            @if (Battle.Location.IsWaterRegion()){
                <div class="splat-toggle">
                    <div class="rain front-row"></div>
                    <div class="rain back-row"></div>
                </div>
                <MudPaper Height="90vh" Width="100vw" Class="d-flex bg-transparent shadow-none position-fixed bottom-0 p-0">
                    <MudContainer Class="d-flex flex-column p-0">
                        <CombatCard CurrentUser="CurrentUser" Label="Nichtkombattanten" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsTransport()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Flugzeugträger" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsAircraftCarrier()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="U-Boot & Zerstörer" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsSubmarine() || t.IsDestroyer()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Jäger & Kreuzer" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsFighter() || t.IsCruiser()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Bomber & Schlachtschiff" Attacker="true" Units="@Battle.Attackers.Where(t => t.IsBomber() || t.IsBattleship()).ToList()" Battle="@Battle"/>
                    </MudContainer>
                    <MudContainer Class="d-flex flex-column p-0 text-center">
                        <MudText Color="Color.Secondary">@Battle.CurrentNation.Name</MudText>
                        <MudText Color="Color.Info">@Battle.Phase.GetDescription()</MudText>
                        @if (Battle.DiceRolls is not null){
                            <Dices Rolls="@Battle.DiceRolls"/>
                        }
                        <MudContainer Class="d-flex mt-10">
                            <MudText Typo="Typo.h5" Color="@Color.Info">Normale Treffer ausstehend: <br/><MudText Typo="Typo.h3" Color="@Color.Secondary" Class="text-center">@Battle.NormalHits</MudText></MudText>
                            <MudText Typo="Typo.h5" Color="@Color.Info">U-Boot Treffer ausstehend: <br/><MudText Typo="Typo.h3" Color="@Color.Secondary" Class="text-center">@Battle.NonAirHits</MudText></MudText>
                            <MudText Typo="Typo.h5" Color="@Color.Info">Luft Treffer ausstehend: <br/><MudText Typo="Typo.h3" Color="@Color.Secondary" Class="text-center">@Battle.NonSubmarineHits</MudText></MudText>
                        </MudContainer>
                        @if (CurrentUser.Nations.Any(i => i.Id == Battle.CurrentNation.Id)){
                            @if (!Battle.IsDecided){
                                <MudFab StartIcon="@Icons.Material.Filled.NextPlan" Color="Color.Error" Label="Fortsetzen" Class="align-self-center mb-3 mt-3 position-absolute bottom-0" OnClick="StartBattle"/>
                                @if (Battle.Phase == EBattlePhase.RESOLUTION && Battle.AttackerDecided == false){
                                    <MudFab StartIcon="@Icons.Material.Filled.Autorenew" Color="Color.Info" Label="Weitermachen" Class="align-self-center mb-3 mt-3 position-absolute bottom-17" OnClick="Continue"/>
                                    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Info" Label="Zurückziehen" Class="align-self-center mb-3 mt-3 position-absolute bottom-10" OnClick="Retreat"/>
                                }
                            }
                            else{
                                <MudFab StartIcon="@Icons.Material.Filled.NextPlan" Color="Color.Error" Label="Beenden" Class="align-self-center mb-3 mt-3 position-absolute bottom-0" OnClick="StartBattle"/>
                            }
                        }
                    </MudContainer>
                    <MudContainer Class="d-flex flex-column p-0">
                        <CombatCard CurrentUser="CurrentUser" Label="Nichtkombattanten" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsTransport()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="U-Boot & Bomber" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsSubmarine() || t.IsBomber()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Zerstörer & Flugzeugträger" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsDestroyer() || t.IsAircraftCarrier()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Kreuzer" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsCruiser()).ToList()" Battle="@Battle"/>
                        <CombatCard CurrentUser="CurrentUser" Label="Jäger & Schlachtschiff" Attacker="false" Units="@Battle.Defenders.Where(t => t.IsBattleship() || t.IsFighter()).ToList()" Battle="@Battle"/>
                    </MudContainer>
                </MudPaper>
            }
        </DialogContent>
    </MudDialog>
}


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private string RegionType { get; set; } = FilterOperator.String.Empty;

    private bool IsRendered { get; set; }

    [Parameter]
    public Battle? Battle { get; set; }
    
    [Parameter]
    public User? CurrentUser { get; set; }

    protected override void OnInitialized(){
        ViewRefreshService.HandleViewRefreshChange += HandleViewRefreshChange;
        if (Battle is null) return;
        HandleViewRefreshChange();
        RegionType = !Battle.IsAquaticBattle() ? "battleground-drawer-land" : "battleground-drawer-water";
    }
    
    private async void HandleViewRefreshChange(){
        if(Battle is not null) Battle = await BattleRepository.ReadBattleGraphAsync(Battle.Id);
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender){
        if (IsRendered) return;
        if (Battle.IsAquaticBattle()){
            JSRuntime.InvokeVoidAsync("makeRain");
        }
        if (!Battle.IsAquaticBattle()){
            JSRuntime.InvokeVoidAsync("MakeFire");
        }
        IsRendered = true;
    }

    private async Task StartBattle(){
        if (Battle is null) return;
        if (!Battle.AdvanceCombat()) return;
        if (Battle.IsDecided){
            GameEngine.FinishBattle(Battle);
            Submit();
        }
        else{
            await BattleRepository.UpdateAsync(Battle);
        }
        StateHasChanged();
    }

    private async Task Retreat(){
        if (Battle is null) return;
        await GameEngine.AttackerRetreats(Battle);
    }

    private async Task Continue(){
        if (Battle is null) return;
        await GameEngine.AttackerContinues(Battle);
    }

    void Submit(){
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

    public void Dispose(){
        ViewRefreshService.HandleViewRefreshChange -= HandleViewRefreshChange;
    }

}