@using Model.Entities.Units.Abstract
@using Model.Entities
@inject GameEngine GameEngine

@if (Units is null){
    return;
}
<MudDialog>
    <DialogContent>
        <MudText Class="fw-bold text-center mb-3 mt-5 noselect" Color="Color.Tertiary" Typo="Typo.h4">Zusammenfassung Bewegung</MudText>
        @if (Units.Count > 0){
            <MudContainer>
                <MudText Class="fw-bold text-center mb-3 mt-5" Color="Color.Default" Typo="Typo.body1">Folgende Truppen werden bewegt</MudText>
            </MudContainer>
            <MudContainer>
                @foreach (var unit in Units){
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 95 95" class="@SessionInfo.Nation.Name ml-3 mb-3" width="50" height="50">
                        <g>
                            <circle class="troopbadge-medal" cx="47.5" cy="47.5" r="47.25"/>
                            <path class="troopbadge-medal"
                                  d="M47.5,.5c25.92,0,47,21.08,47,47s-21.08,47-47,47S.5,73.42,.5,47.5,21.58,.5,47.5,.5m0-.5C21.27,0,0,21.27,0,47.5s21.27,47.5,47.5,47.5,47.5-21.27,47.5-47.5S73.73,0,47.5,0h0Z"/>
                        </g>
                        <path class="troopbadge-symbol"
                              d="@unit.GetStringFromDictionary(UnitPaths.Paths)"/>
                    </svg>
                    <span>@GetJourney(unit)</span>
                    <br/>
                }
            </MudContainer>
        }
        else{
            <MudText Class="text-center">Achtung! Sie bewegen keine Einheiten.</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Änderungen vornehmen</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Submit">Zur nächsten Phase</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public SessionInfo? SessionInfo { get; set; }

    private List<AUnit>? Units { get; set; }

    private string GetJourney(AUnit unit){
        if (unit.Target is null) return string.Empty;
        if (unit.GetLocation() is null) return string.Empty;
        return unit.GetLocation().Name + " -> " + unit.Target.Name;
    }

    protected override async Task OnInitializedAsync(){
        Units = await GameEngine.GetMovingUnits();
    }

    async void Submit(){
        await GameEngine.EndPhase();
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

}