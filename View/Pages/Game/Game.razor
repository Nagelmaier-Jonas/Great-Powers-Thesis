@page "/Game"
@using Model.Entities
@using Domain.Repositories
@using Domain.Repositories.Implementations
@using EventHandling.EventHandler
@using Model.Entities.Regions
@using Model.Entities.Units.Abstract
@using View.Services
@inject SessionInfoRepository SessionInfoRepository
@inject NationRepository NationRepository
@inject WaterRegionRepository WaterRegionRepository
@inject UnitRepository UnitRepository
@inject ViewRefreshService ViewRefreshService
@inject StateHasChangedEventHandler StateHasChangedEventHandler

<style>
    .sidebar{
        display: none;
    }
</style>
<MudLayout>
    <GameBar Info="@Info" Nations="@Nations"/>
    @if (!_open){
        <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft" Size="Size.Large" Class="position-fixed top-50 end-0 z-index-1 p-1 border-dotted" Style="color: #000000; background-color: rgba(0,0,0,0.2);" OnClick="OpenDrawer"/>
    }
    <MudDrawer @bind-Open="@_open" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Class="bg-opacity-60" Width="500px">
        <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Class="position-absolute top-0 end-0 mt-3" OnClick="CloseDrawer"/>
        <Purchase SessionInfo="Info" CurrentNation="CurrentNation" MaxTroops="MaxTroops"/>
        <CombatMove SessionInfo="Info"/>
        <ConductCombat SessionInfo="Info"/>
        <MobilizeNewUnits SessionInfo="Info"/>
    </MudDrawer>
    <Map Nations="@Nations" SeeZones="@SeeZones"/>
</MudLayout>

@code {
    private SessionInfo Info { get; set; } = new();
    private List<Nation> Nations { get; set; } = new();
    private List<WaterRegion> SeeZones { get; set; } = new();
    private Nation CurrentNation { get; set; } = new();
    private  List<AUnit> PlaceableUnits { get; set; } = new();
    private int MaxTroops { get; set; }
    
    bool _open = false;

    protected override async Task OnInitializedAsync(){
        ViewRefreshService.HandleViewRefreshChange += HandleViewRefreshChange;
        StateHasChangedEventHandler.HandleViewRefreshChange += HandleViewRefreshChange;
        Info = await SessionInfoRepository.ReadAsync();
        Nations = await NationRepository.ReadAllGraphAsync();
        SeeZones = await WaterRegionRepository.ReadAllGraphAsync();
        CurrentNation = await NationRepository.ReadGraphAsync(Info.CurrentNationId);
        MaxTroops = await NationRepository.GetFactoryPower(CurrentNation);
        //PlaceableUnits = await NationRepository.GetPlaceableUnits(CurrentNation);
    }

    void OpenDrawer(){
        _open = true;
    }

    void CloseDrawer(){
        _open = false;
    }
    
    private async void HandleViewRefreshChange(){
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose(){
        ViewRefreshService.HandleViewRefreshChange -= HandleViewRefreshChange;
        StateHasChangedEventHandler.HandleViewRefreshChange -= HandleViewRefreshChange;
    }

}