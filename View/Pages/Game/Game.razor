@page "/Game"
@using Model.Entities
@using Domain.Repositories
@using Domain.Repositories.Implementations
@using Domain.Services
@using Model.Entities.Regions
@using Model.Entities.Units.Abstract
@using System.Drawing
@using Size = MudBlazor.Size
@inject ViewRefreshService ViewRefreshService
@inject IServiceScopeFactory ServiceScopeFactory
@inject CombatTargets CombatTargets
@inject NonCombatTargets NonCombatTargets
@inject NavigationManager NavigationManager
@implements IDisposable

<style>
    .sidebar{
        display: none;
    }
</style>
<MudLayout Style="background-image: url(img/menu/paper-bg.jpg) !important; background-size: cover !important;">
    <GameBar Info="@Info" Nations="@Nations"/>
    @if (CurrentUser is not null && CurrentUser.Nations.Any(n => n.Id == CurrentNation.Id)){
        @if (!_open){
            <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft" Size="Size.Large" Class="position-fixed top-50 end-0 z-index-1 p-1 border-dotted" Style="color: #000000; background-color: rgba(0,0,0,0.2);" OnClick="OpenDrawer"/>
        }
        <MudDrawer @bind-Open="@_open" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Responsive" Class="bg-opacity-60 game-drawer" Width="25vw">
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Class="position-absolute top-0 end-0 mt-3" OnClick="CloseDrawer"/>
            <Purchase SessionInfo="Info" CurrentNation="CurrentNation" MaxTroops="MaxTroops"/>
            <CombatMove SessionInfo="Info"/>
            <ConductCombat SessionInfo="Info" Battlegrounds="Battlegrounds"/>
            <NonCombatMove SessionInfo="Info"/>
            <MobilizeNewUnits SessionInfo="Info" CurrentNation="CurrentNation" PlaceableFactories="PlaceableFactories" PlaceableUnits="PlaceableUnits"/>
            <CollectIncome SessionInfo="Info" CurrentNation="CurrentNation"/>
        </MudDrawer>
    }
    <GameMap Nations="@Nations" SeeZones="@SeeZones" SessionInfo="@Info" Style="@Style" ChildStyle="@ChildStyle" Battlegrounds="Battlegrounds" UnitPaths="UnitPaths" Units="Units" IncomeData="IncomeData"/>
</MudLayout>

@code {
    
    [CascadingParameter]
    public User? CurrentUser { get; set; }

    private SessionInfo Info { get; set; } = new();
    private List<Nation> Nations { get; set; } = new();
    private List<WaterRegion> SeeZones { get; set; } = new();
    private Nation CurrentNation { get; set; } = new();
    private List<ARegion>? Battlegrounds { get; set; } = new();
    private List<AUnit> PlaceableUnits { get; set; } = new();
    private List<AUnit> PlaceableFactories { get; set; } = new();
    private List<string> UnitPaths { get; set; } = new();
    private Dictionary<AUnit,int> Units { get; set; } = new();
    private List<ARegion> IncomeData { get; set; } = new();
    private int MaxTroops { get; set; }

    bool _open = false;
    private string Style { get; set; } = "width: 100vw; transition: padding-right 0.5s;";
    private string ChildStyle { get; set; } = "";

    protected override void OnInitialized(){
        if (CurrentUser == null){
            NavigationManager.NavigateTo("/Identity/Account/Login");
        }
        ViewRefreshService.HandleViewRefreshChange += HandleViewRefreshChange;
    }

    protected override async Task OnInitializedAsync(){
        await Load();
    }

    private async Task Load(){
        var scope = ServiceScopeFactory.CreateScope();
        Info = await scope.ServiceProvider.GetRequiredService<SessionInfoRepository>().ReadAsync();
        Nations = await scope.ServiceProvider.GetRequiredService<NationRepository>().ReadAllGraphAsync();
        SeeZones = await scope.ServiceProvider.GetRequiredService<WaterRegionRepository>().ReadAllGraphAsync();
        CurrentNation = await scope.ServiceProvider.GetRequiredService<NationRepository>().ReadGraphAsync(Info.CurrentNationId);
        MaxTroops = await scope.ServiceProvider.GetRequiredService<NationRepository>().GetFactoryPower(CurrentNation);
        CurrentUser = await scope.ServiceProvider.GetRequiredService<UserRepository>().ReadGraphAsync(CurrentUser!.Id);
        Battlegrounds = await scope.ServiceProvider.GetRequiredService<GameEngine>().GetBattleLocations();
        PlaceableUnits = await scope.ServiceProvider.GetRequiredService<GameEngine>().GetPlaceableUnits();
        PlaceableFactories = await scope.ServiceProvider.GetRequiredService<GameEngine>().GetPlaceableFactories();
        UnitPaths = await GetUnitPaths(scope);
        Units = await GetUnits();
        IncomeData = await GetIncomeData();
        if (!(CurrentUser is not null && CurrentUser.Nations.Any(n => n.Id == CurrentNation.Id))){
            CloseDrawer();
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task<List<string>> GetUnitPaths(IServiceScope scope){
        var paths = new List<string>();
        foreach (var unit in Nations.SelectMany(nation => nation.Regions.SelectMany(land => land.GetStationedUnits()))){
            paths.Add(await GetPath(unit, scope));
        }
        foreach (var unit in SeeZones.SelectMany(sea => sea.GetStationedUnits())){
            paths.Add(await GetPath(unit, scope));
        }
        return paths;
    }
    
    private async Task<string> GetPath(AUnit unit, IServiceScope scope){
        var Path = new List<Point>();
        if (unit is null) return String.Empty;
        var countries = await scope.ServiceProvider.GetRequiredService<GameEngine>().GetPathForUnit(unit);
        if (countries.Count is 0) return String.Empty;
        foreach (var c in countries){
            Path.Add(new Point((int)c.PositionX, (int)c.PositionY));
        }
        return Path.Count is 0 ? String.Empty : Path.Aggregate($"M", (current, p) => current + $" {p.X} {p.Y}");
    }

    private async Task<Dictionary<AUnit, int>> GetUnits(){
        var units = new Dictionary<AUnit, int>();
        foreach (var nation in Nations){
            foreach (var land in nation.Regions){
                foreach (var unit in land.GetOneStationedUnitPerType()){
                    units.Add(unit, land.GetUnitCount(unit));
                }
            }
        }
        foreach (var sea in SeeZones){
            foreach (var unit in sea.GetOneStationedUnitPerType()){
                units.Add(unit, sea.GetUnitCount(unit));
            }
        }
        return units;
    }
    
    private async Task<List<ARegion>> GetIncomeData(){
        var incomeData = new List<ARegion>();
        foreach (var land in Nations.SelectMany(nation => nation.Regions)){
            incomeData.Add(land);
        }
        foreach (var sea in SeeZones){
            incomeData.Add(sea);
        }
        return incomeData;
    } 

    void OpenDrawer(){
        _open = true;
        Style = "width: 75vw; transition: width 0.5s;";
        ChildStyle = "transform: translate(0px, 0px); transition: transform 0.5s;";
        
    }

    void CloseDrawer(){
        _open = false;
        Style = "width: 100vw; transition: width 0.5s;";
        ChildStyle = "";
        CombatTargets.ClearRegions();
        NonCombatTargets.ClearRegions();
        CombatTargets.ClearUnits();
        NonCombatTargets.ClearUnits();
    }

    private async void HandleViewRefreshChange(){
        await Load();
    }

    public void Dispose(){
        ViewRefreshService.HandleViewRefreshChange -= HandleViewRefreshChange;
    }

}