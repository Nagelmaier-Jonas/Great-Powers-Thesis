@page "/Game"
@using Model.Entities
@using Domain.Repositories
@using Domain.Repositories.Implementations
@using Domain.Services
@using EventHandling.EventHandler
@using Model.Entities.Regions
@using View.Services
@inject ViewRefreshService ViewRefreshService
@inject StateHasChangedEventHandler StateHasChangedEventHandler
@inject IServiceScopeFactory ServiceScopeFactory
@inject CombatTargets CombatTargets
@inject NonCombatTargets NonCombatTargets
@inject ActiveRegion ActiveRegion
@inject GameEngine GameEngine
@implements IDisposable

<style>
    .sidebar{
        display: none;
    }
</style>
<MudLayout Style="background-image: url(img/menu/paper-bg.jpg) !important; background-size: cover !important;">
    <GameBar Info="@Info" Nations="@Nations"/>
    @if (CurrentUser is not null && CurrentUser.Nations.Any(n => n.Id == CurrentNation.Id)){
        @if (!_open){
            <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft" Size="Size.Large" Class="position-fixed top-50 end-0 z-index-1 p-1 border-dotted" Style="color: #000000; background-color: rgba(0,0,0,0.2);" OnClick="OpenDrawer"/>
        }
        <MudDrawer @bind-Open="@_open" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Responsive" Class="bg-opacity-60 game-drawer" Width="25vw">
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Class="position-absolute top-0 end-0 mt-3" OnClick="CloseDrawer"/>
            <Purchase SessionInfo="Info" CurrentNation="CurrentNation" MaxTroops="MaxTroops"/>
            <CombatMove SessionInfo="Info"/>
            <ConductCombat SessionInfo="Info"/>
            <NonCombatMove SessionInfo="Info"/>
            <MobilizeNewUnits SessionInfo="Info" CurrentNation="CurrentNation"/>
            <CollectIncome SessionInfo="Info" CurrentNation="CurrentNation"/>
        </MudDrawer>
    }
    <GameMap Nations="@Nations" SeeZones="@SeeZones" SessionInfo="@Info" Style="@Style" ChildStyle="@ChildStyle" Battlegrounds="Battlegrounds"/>
</MudLayout>

@code {
    
    [CascadingParameter]
    public User? CurrentUser { get; set; }

    private SessionInfo Info { get; set; } = new();
    private List<Nation> Nations { get; set; } = new();
    private List<WaterRegion> SeeZones { get; set; } = new();
    private Nation CurrentNation { get; set; } = new();
    private List<ARegion>? Battlegrounds { get; set; }
    private int MaxTroops { get; set; }

    bool _open = false;
    private string Style { get; set; } = "width: 100vw; transition: padding-right 0.5s;";
    private string ChildStyle { get; set; } = "";

    protected override void OnInitialized(){
        ViewRefreshService.HandleViewRefreshChange += HandleViewRefreshChange;
    }

    protected override async Task OnInitializedAsync(){
        await Load();
    }

    private async Task Load(){
        var scope = ServiceScopeFactory.CreateScope();
        Info = await scope.ServiceProvider.GetRequiredService<SessionInfoRepository>().ReadAsync();
        Nations = await scope.ServiceProvider.GetRequiredService<NationRepository>().ReadAllGraphAsync();
        SeeZones = await scope.ServiceProvider.GetRequiredService<WaterRegionRepository>().ReadAllGraphAsync();
        CurrentNation = await scope.ServiceProvider.GetRequiredService<NationRepository>().ReadGraphAsync(Info.CurrentNationId);
        MaxTroops = await scope.ServiceProvider.GetRequiredService<NationRepository>().GetFactoryPower(CurrentNation);
        CurrentUser = await scope.ServiceProvider.GetRequiredService<UserRepository>().ReadGraphAsync(CurrentUser!.Id);
        Battlegrounds = await scope.ServiceProvider.GetRequiredService<GameEngine>().GetBattleLocations();
        if (!(CurrentUser is not null && CurrentUser.Nations.Any(n => n.Id == CurrentNation.Id))){
            CloseDrawer();
        }
        await InvokeAsync(StateHasChanged);
    }

    void OpenDrawer(){
        _open = true;
        Style = "width: 75vw; transition: width 0.5s;";
        ChildStyle = "transform: translate(0px, 0px); transition: transform 0.5s;";
        
    }

    void CloseDrawer(){
        _open = false;
        Style = "width: 100vw; transition: width 0.5s;";
        ChildStyle = "";
        CombatTargets.ClearRegions();
        NonCombatTargets.ClearRegions();
        CombatTargets.ClearUnits();
        NonCombatTargets.ClearUnits();
    }

    private async void HandleViewRefreshChange(){
        await Load();
    }

    public void Dispose(){
        ViewRefreshService.HandleViewRefreshChange -= HandleViewRefreshChange;
    }

}