@page "/Create"
@inherits SidebarComponent
@using Microsoft.AspNetCore.Components
@using System.Diagnostics
@using Model.Configuration
@using Microsoft.EntityFrameworkCore
@using MySqlConnector
@inject GreatPowersDbContext GreatPowersDbContext

<style>
    body {
        background-image: url('img/paper-bg.jpg')
    }
</style>
<MudForm>
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4">
                <MudText>Session Name</MudText>
                <MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!" @bind-Value="SessionName"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="() => CreateNewGame(SessionName)">Create Session</MudButton>
</MudForm>

@code {
    private static readonly Random Random = new ();
    private string SessionName { get; set; } = new (Enumerable.Repeat("ABCDEFGHIJKLMNOPQRSTUVWXYZ", 10).Select(s => s[Random.Next(s.Length)]).ToArray());

    private async void CreateNewGame(string SessionName){
        await WriteDockerFile(SessionName);
        await StartDockerContainer(SessionName);
        while (!CheckConnection()){
        }
        await Task.Run(ChangeDbContext);
        StateHasChanged();
    }

    private Task WriteDockerFile(string SessionName){
        var schema = File.ReadAllText("..\\Databases\\schema.sql");
        var dockerComposeFile = File.ReadAllText("..\\Databases\\docker-compose.yml");
        dockerComposeFile = dockerComposeFile.Replace("./default:/var/lib/mysql", $"./{SessionName}:/var/lib/mysql");
        dockerComposeFile = dockerComposeFile.Replace("26280", "26281");
        dockerComposeFile = dockerComposeFile.Replace("greatpowers_db_default", $"greatpowers_db_local_{SessionName}");
        Directory.CreateDirectory($"..\\Databases\\{SessionName}");
        File.WriteAllText($"..\\Databases\\{SessionName}\\schema.sql", schema);
        File.WriteAllText($"..\\Databases\\{SessionName}\\docker-compose.yml", dockerComposeFile);
        return Task.CompletedTask;
    }

    private Task StartDockerContainer(string SessionName){
        var process = new Process();
        var startInfo = new ProcessStartInfo{
            WindowStyle = ProcessWindowStyle.Hidden,
            FileName = "cmd.exe"
        };
        process.StartInfo = startInfo;
        process.StartInfo.Arguments = $"/c cd ..\\Databases\\{SessionName} && docker-compose up -d --build";
        process.Start();
        process.WaitForExit();
        return Task.CompletedTask;
    }

    private Task ChangeDbContext(){
        try{
            AppSettings.Port = "26281";
            GreatPowersDbContext.Database.CloseConnection();
            GreatPowersDbContext.Database.SetConnectionString("server=localhost; port=26281; database=greatpowers; user=greatpowers; password=greatpowers; Persist Security Info=False; Connect Timeout=300");
            GreatPowersDbContext.Database.OpenConnection();
            return Task.CompletedTask;
        }
        catch (Exception e){
            throw;
        }
    }

    private bool CheckConnection(){
        try{
            var connection = new MySqlConnection("server=localhost; port=26281; database=greatpowers; user=greatpowers; password=greatpowers; Persist Security Info=False; Connect Timeout=300");
            connection.Open();
            connection.Close();
            return true;
        }
        catch (Exception){
            return false;
        }
    }

}