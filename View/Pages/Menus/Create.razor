@page "/Create/{Local:bool}"
@inherits SidebarComponent
@using Microsoft.AspNetCore.Components
@using Domain.Services
@using Model.Configuration
@using Model.Entities
@using Domain.Repositories
@using Domain.Repositories.Implementations
@using EventBus.Clients
@inject NavigationManager NavigationManager
@inject DockerService DockerService
@inject FileService FileService
@inject SessionInfoRepository SessionInfoRepository
@inject NationRepository NationRepository
@inject UserRepository UserRepository
@inject EventSubscriberHelper EventSubscriberHelper

<style>
    body {
        background-image: url('img/menu/paper-bg.jpg')
    }
</style>
<MudCard Style="width: 20vw; margin-top: 10vh !important;" Class="m-auto">
    <MudCardMedia Image="img/menu/create.png" Height="200"/>
    <MudCardContent>
        <MudTextField T="string" HelperText="Session Name" Label="Name" Required="true" RequiredError="Name is required!" @bind-Value="SessionName"/>
    </MudCardContent>
    <MudCardActions>
        <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CreateNewGame(SessionName)">
            @if (_processing){
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Creating ...</MudText>
            }
            else{
                <MudText>Create</MudText>
            }
        </MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public bool Local { get; set; }

    [CascadingParameter]
    public User? CurrentUser { get; set; }

    private static readonly Random Random = new();
    private string SessionName { get; set; } = "NewSimulation";
    private bool _processing = false;

    private async Task CreateNewGame(string SessionName){
        var currentUser = CurrentUser;
        await Task.Run(() => _processing = true);
        StateHasChanged();
        SessionName = SessionName.Replace(" ", "");
        var portmySql = DockerService.GetPortMySql().ToString();
        var portRabbitMqS = DockerService.GetPortRabbitMqS().ToString();
        var portRabbitMqW = DockerService.GetPortRabbitMqW().ToString();
        await DockerService.WriteDockerFile(SessionName, portmySql, portRabbitMqS, portRabbitMqW);
        await DockerService.StartDockerContainer(SessionName, portmySql, portRabbitMqS, portRabbitMqW);
        while (!DockerService.CheckConnection("localhost", portmySql)){
        }
        await Task.Run(() => DockerService.ChangeDbContext("localhost", portmySql, portRabbitMqS, portRabbitMqW));
        EventSubscriberHelper.Init();
        var databasePath = Path.Combine(Directory.GetParent(Environment.CurrentDirectory).FullName, "Databases");
        var sessionInfo = new SessionInfo(){
            Id = 1,
            CurrentNationId = 1,
            StandardVictory = true,
            TotalVictory = false,
            Phase = EPhase.PurchaseUnits,
            Round = 1,
            AxisCapitals = 6,
            AlliesCapitals = 6,
            Path = Path.Combine(Directory.GetParent(Environment.CurrentDirectory).FullName, $"{databasePath}\\{SessionName}\\")
        };
        await SessionInfoRepository.UpdateAsync(sessionInfo);
        if (Local){
            var user = await UserRepository.ReadGraphAsync(currentUser!.Id);
            if (user == null){
                currentUser.Nations = new ();
                await UserRepository.CreateAsync(currentUser);
            }
            await SetPlayers(CurrentUser);
            NavigationManager.NavigateTo("/game");
        }
        else{
            NavigationManager.NavigateTo("/lobby");
            await UserRepository.InitUser(CurrentUser);
        }
        CurrentUser = await UserRepository.ReadGraphAsync(currentUser.Id);
        StateHasChanged();
    }

    private async Task SetPlayers(User user){
        var nations = await NationRepository.ReadAllGraphAsync();
        foreach (var nation in nations){
            nation.UserId = user!.Id;
            await NationRepository.UpdateAsync(nation);
        }
    }

    protected override void OnInitialized(){
        Items.Add(new SidebarItem(){
            Name = "MainMenu",
            Link = "/"
        });
        base.OnInitialized();
    }

}