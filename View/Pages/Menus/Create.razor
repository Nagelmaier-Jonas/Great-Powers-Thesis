@page "/Create"
@inherits SidebarComponent
@using Microsoft.AspNetCore.Components
@using Domain.Services
@using Model.Configuration
@using Model.Entities
@using Domain.Repositories
@inject NavigationManager NavigationManager
@inject DockerService DockerService
@inject FileService FileService
@inject SessionInfoRepository SessionInfoRepository

<style>
    body {
        background-image: url('img/menu/paper-bg.jpg')
    }
</style>
<MudForm>
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4">
                <MudText>Session Name</MudText>
                <MudTextField T="string" Label="Name" Required="true" RequiredError="Name is required!" @bind-Value="SessionName"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="() => CreateNewGame(SessionName)">Create Session</MudButton>
</MudForm>

@code {
    private static readonly Random Random = new ();
    private string SessionName { get; set; } = new (Enumerable.Repeat("ABCDEFGHIJKLMNOPQRSTUVWXYZ", 10).Select(s => s[Random.Next(s.Length)]).ToArray());

    private async Task CreateNewGame(string SessionName){
        var portmySql = DockerService.GetPortMySql().ToString();
        var portRabbitMqS = DockerService.GetPortRabbitMqS().ToString();
        var portRabbitMqW = DockerService.GetPortRabbitMqW().ToString();
        await DockerService.WriteDockerFile(SessionName, portmySql, portRabbitMqS, portRabbitMqW);
        await DockerService.StartDockerContainer(SessionName, portmySql, portRabbitMqS, portRabbitMqW);
        while (!DockerService.CheckConnection("localhost", portmySql)){
        }
        await Task.Run(() => DockerService.ChangeDbContext("localhost", portmySql, portRabbitMqS, portRabbitMqW));
        var sessionInfo = new SessionInfo(){
            Id = 1,
            CurrentNationId = 1,
            StandardVictory = true,
            TotalVictory = false,
            Phase = EPhase.PurchaseUnits,
            Round = 1,
            AxisCapitals = 6,
            AlliesCapitals = 6,
            Path = Path.Combine(Directory.GetParent(Environment.CurrentDirectory).FullName, $"Databases\\{SessionName}\\")
        };
        FileService.WriteSessionInfoToFile(Path.Combine(Directory.GetParent(Environment.CurrentDirectory).FullName, $"Databases\\{SessionName}\\"),sessionInfo);
        await SessionInfoRepository.UpdateAsync(sessionInfo);
        NavigationManager.NavigateTo("/game");
        StateHasChanged();
    }
}