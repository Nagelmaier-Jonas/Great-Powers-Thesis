@page "/lobby"
@using Model.Configuration
@using System.Net
@using System.Net.Sockets
@using System.Text.Json
@using DataTransfer
@using Domain.Repositories.Implementations
@using Domain.Services
@using EventBus.Clients
@using Model.Entities
@using Vanara.Extensions
@inject NationRepository NationRepository
@inject UserRepository UserRepository
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ReadyService ReadyService
@inject ViewRefreshService ViewRefreshService
@inject EventPublisher EventPublisher
@implements IDisposable

<style>
    body {
        background-image: url('img/menu/paper-bg.jpg')
    }
</style>
<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Top" Class="text-center">
    <MudTimelineItem Color="Color.Secondary" Variant="Variant.Filled" Class="align-items-center">
        <ItemContent>
            <MudAlert Severity="Severity.Warning" NoIcon="true" Class="join-info">Ip Addresse: @GetLocalIpAddress()</MudAlert>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Secondary" Variant="Variant.Filled" Class="align-items-center">
        <ItemContent>
            <MudAlert Severity="Severity.Warning" NoIcon="true" Class="join-info">Datenbank Port: @AppSettings.DBPort</MudAlert>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Secondary" Variant="Variant.Filled" Class="align-items-center">
        <ItemContent>
            <MudAlert Severity="Severity.Warning" NoIcon="true" Class="join-info">Rabbit Mq Port 1: @AppSettings.RabbitPort</MudAlert>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color="Color.Secondary" Variant="Variant.Filled" Class="align-items-center">
        <ItemContent>
            <MudAlert Severity="Severity.Warning" NoIcon="true" Class="join-info">Rabbit Mq Port 2: @AppSettings.RabbitPort2</MudAlert>
        </ItemContent>
    </MudTimelineItem>
</MudTimeline>

@if (Nations.Count > 0){
    <MudContainer Class="d-flex justify-content-around align-items-center mt-5">
        @foreach (var n in Nations.Where(n => n.Id != 6)){
            <MudCard Style="width: 10vw;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@n.Type.GetDescription()</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardMedia Image=@($"img/flags/{n.Name}.svg") Height="100" Style="margin: 20px; background-size: contain;"/>
                <MudCardActions Class="justify-content-center">
                    @if (n.UserId is null){
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => Assign(n))">Auswählen</MudButton>
                    }
                    else{
                        @if (n.UserId == CurrentUser.Id){
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="@(() => Release(n))">Verlassen</MudButton>
                        }
                        else{
                            <MudText Typo="Typo.body1">Bereits belegt</MudText>
                        }
                    }
                </MudCardActions>
            </MudCard>
        }
    </MudContainer>
}

<MudCheckBox T="bool" CheckedChanged="ChangeReadyStatus" Size="Size.Large" Color="Color.Secondary" Label="Bereit" LabelPosition="LabelPosition.Start" Class="ready-btn"/>

@code {

    [CascadingParameter]
    public User? CurrentUser { get; set; }

    private List<Nation> Nations { get; set; } = new();

    private List<int> AxisIds { get; set; } = new(){
        2, 4
    };

    private List<int> AlliesIds { get; set; } = new(){
        1, 3, 5
    };

    public bool Ready { get; set; } = false;

    private string GetLocalIpAddress(){
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList){
            if (ip.AddressFamily != AddressFamily.InterNetwork) continue;
            if (!ip.ToString().EndsWith(".1")) return ip.ToString();
        }
        return "No Ip Found";
    }

    private async Task ChangeReadyStatus(){
        Ready = !Ready;
        if (Ready){
            CurrentUser!.Ready = true;
            await UserRepository.UpdateAsync(CurrentUser);
        }
        else{
            CurrentUser!.Ready = false;
            await UserRepository.UpdateAsync(CurrentUser);
        }
        var users = await UserRepository.ReadAllAsync();
        if (users.All(u => u.Ready)){
            if (Nations.Where(n => n.Id != 6).Any(n => n.UserId is null)){
                Snackbar.Add("Warten bis alle Nationen vergeben sind!", Severity.Info);
                return;
            }
            EventPublisher.Publish(JsonSerializer.Serialize(new ReadyEvent()));
        }
        
    }

    protected override async Task OnInitializedAsync(){
        ReadyService.HandleReadyChange += NavigateToGame;
        ViewRefreshService.HandleViewRefreshChange += Load;
        Load();
    }

    private void NavigateToGame(){
        NavigationManager.NavigateTo("/game");
    }
    
    private async void Load(){
        Nations = await NationRepository.ReadAllGraphAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task Assign(Nation nation){
        if (Ready){
            Snackbar.Add("Du kannst keine Nation wählen, solange du bereit bist!", Severity.Error);
            return;
        }
        var userNations = Nations.Where(n => n.UserId == CurrentUser!.Id).ToList();
        if (userNations.Any(n => AlliesIds.Contains(n.Id) && AxisIds.Contains(nation.Id)) || userNations.Any(n => AxisIds.Contains(n.Id) && AlliesIds.Contains(nation.Id))){
            Snackbar.Add("Sie können nicht die Achsenmächte und die Allierten gleichzeitig simulieren", Severity.Error);
            return;
        }
        nation.UserId = CurrentUser!.Id;
        await NationRepository.UpdateAsync(nation);
        Nations = await NationRepository.ReadAllGraphAsync();
        Snackbar.Add("Sie haben die Nation erfolgreich zugewiesen", Severity.Success);
        EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));
    }

    private async Task Release(Nation nation){
        if (Ready){
            Snackbar.Add("Du kannst keine Nation verlassen, solange du bereit bist!", Severity.Error);
            return;
        }
        if (nation.UserId is null){
            Snackbar.Add("Diese Nation ist bereits freigegeben", Severity.Error);
            return;
        }
        if (nation.UserId != CurrentUser!.Id){
            Snackbar.Add("Sie können keine fremden Nationen freigeben", Severity.Error);
            return;
        }
        await NationRepository.ResetPlayer(nation.Id);
        Nations = await NationRepository.ReadAllGraphAsync();
        Snackbar.Add("Nation freigegeben", Severity.Success);
        EventPublisher.Publish(JsonSerializer.Serialize(new StateHasChangedEvent()));
    }

    public void Dispose(){
        ReadyService.HandleReadyChange -= NavigateToGame;
        ViewRefreshService.HandleViewRefreshChange -= Load;
    }

}