@page "/Join"
@inherits SidebarComponent
@using Domain.Services
@inject NavigationManager NavigationManager
@inject ILogger<Join> Logger
@inject DockerService DockerService

<style>
    body {
        background-image: url('img/menu/paper-bg.jpg')
    }
</style>
<MudForm>
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4">
                <MudText>Ip Adress</MudText>
                <MudTextField T="string" Label="IpAddress" Required="true" RequiredError="Ip Address is required!" @bind-Value="IpAddress"/>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4">
                <MudText>Port</MudText>
                <MudTextField T="string" Label="Port" Required="true" RequiredError="Port is required!" @bind-Value="Port"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="JoinGame">Join Session</MudButton>
</MudForm>

@code {
    private string? IpAddress { get; set; }

    private string? Port { get; set; }

    public string? RabbitPortS { get; set; }
    
    public string? RabbitPortW { get; set; }

    private async Task JoinGame(){
        if (Port == null || IpAddress == null || RabbitPortS == null || RabbitPortW == null) return;
        if (DockerService.CheckConnection(IpAddress, Port)){
            await DockerService.ChangeDbContext(IpAddress, Port, RabbitPortS, RabbitPortW);
        }
        else{
            Logger.Log(LogLevel.Critical,  "Cannot connect to the server");
        }
        StateHasChanged();
    }

}